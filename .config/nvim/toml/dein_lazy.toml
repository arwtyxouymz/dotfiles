[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
    nnoremap <silent><leader>f :<C-u>Defx<CR>
'''
hook_source = '''
    call defx#custom#column('mark', {
        \ 'readonly_icon': '✗',
        \ 'selected_icon': '✓'
        \ })
    call defx#custom#option('_', {
        \ 'winwidth': 40,
        \ 'direction': 'topleft',
        \ 'ignored_files': '__pycache__',
        \ 'show_ignored_files': 0,
        \ 'split': 'vertical',
        \ 'columns': 'indent:git:indent:icons:filename:mark',
        \ 'toggle': 1,
        \ 'resume': 1,
        \ })
    call defx#custom#column('git', 'indicators', {
        \ 'Modified'  : '✹',
        \ 'Staged'    : '✚',
        \ 'Untracked' : '✭',
        \ 'Renamed'   : '➜',
        \ 'Unmerged'  : '═',
        \ 'Ignored'   : '☒',
        \ 'Deleted'   : '✖',
        \ 'Unknown'   : '?'
        \ })
'''
hook_post_source = '''
'''

[plugins.ftplugin]
defx = '''
    nnoremap <silent><buffer><expr> <CR>
               \ defx#do_action('drop')
    nnoremap <silent><buffer><expr> c
               \ defx#do_action('copy')
    nnoremap <silent><buffer><expr> m
               \ defx#do_action('move')
    nnoremap <silent><buffer><expr> p
               \ defx#do_action('preview')
    nnoremap <silent><buffer><expr> l
               \ defx#do_action('drop')
    nnoremap <silent><buffer><expr> E
               \ defx#do_action('open', 'vsplit')
    nnoremap <silent><buffer><expr> P
               \ defx#do_action('open', 'pedit')
    nnoremap <silent><buffer><expr> K
               \ defx#do_action('new_directory')
    nnoremap <silent><buffer><expr> N
               \ defx#do_action('new_file')
    nnoremap <silent><buffer><expr> M
               \ defx#do_action('new_multiple_files')
    nnoremap <silent><buffer><expr> C
               \ defx#do_action('toggle_columns',
               \                'mark:filename:type:size:time')
    nnoremap <silent><buffer><expr> S
               \ defx#do_action('toggle_sort', 'time')
    nnoremap <silent><buffer><expr> d
               \ defx#do_action('remove')
    nnoremap <silent><buffer><expr> r
               \ defx#do_action('rename')
    nnoremap <silent><buffer><expr> !
               \ defx#do_action('execute_command')
    nnoremap <silent><buffer><expr> x
               \ defx#do_action('execute_system')
    nnoremap <silent><buffer><expr> yy
               \ defx#do_action('yank_path')
    nnoremap <silent><buffer><expr> .
               \ defx#do_action('toggle_ignored_files')
    nnoremap <silent><buffer><expr> ;
               \ defx#do_action('repeat')
    nnoremap <silent><buffer><expr> h
               \ defx#do_action('cd', ['..'])
    nnoremap <silent><buffer><expr> ~
               \ defx#do_action('cd')
    nnoremap <silent><buffer><expr> q
               \ defx#do_action('quit')
    nnoremap <silent><buffer><expr> <Space>
               \ defx#do_action('toggle_select') . 'j'
    nnoremap <silent><buffer><expr> *
               \ defx#do_action('toggle_select_all')
    nnoremap <silent><buffer><expr> j
               \ line('.') == line('$') ? 'gg' : 'j'
    nnoremap <silent><buffer><expr> k
               \ line('.') == 1 ? 'G' : 'k'
    nnoremap <silent><buffer><expr> <C-g>
               \ defx#do_action('print')
    nnoremap <silent><buffer><expr> cd
               \ defx#do_action('change_vim_cwd')
    nnoremap <silent><buffer><expr> o
                \ defx#do_action('open_or_close_tree')
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
hook_source = 'source $XDG_CONFIG_HOME/nvim/plugins/denite.rc.vim'
hook_add = '''
    nnoremap [denite] <Nop>
    nmap <Space> [denite]
    nmap <Space>p [deniteProject]

    nmap <silent> [denite]b :<C-u>Denite buffer -start-filter -split=floating<CR>
    nmap <silent> [denite]c :<C-u>Denite command -start-filter -split=floating<CR>
    nmap <silent> [denite]g :<C-u>Denite -no-empty grep -start-filter -split=floating<CR>
    nmap <silent> [denite]l :<C-u>Denite line -start-filter -split=floating<CR>
    nmap <silent> [denite]f :<C-u>Denite file/rec -start-filter -split=floating<CR>
    nmap <silent> [denite]d :<C-u>Denite directory_rec -start-filter -split=floating<CR>
    nmap <silent> [denite]h :<C-u>Denite help -start-filter -split=floating<CR>
   
    autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
        nnoremap <silent><buffer><expr> <CR>
        \ denite#do_map('do_action')
        nnoremap <silent><buffer><expr> d
        \ denite#do_map('do_action', 'delete')
        nnoremap <silent><buffer><expr> p
        \ denite#do_map('do_action', 'preview')
        nnoremap <silent><buffer><expr> q
        \ denite#do_map('quit')
        nnoremap <silent><buffer><expr> i
        \ denite#do_map('open_filter_buffer')
        nnoremap <silent><buffer><expr> <Space>
        \ denite#do_map('toggle_select').'j'
    endfunction
'''
    # autocmd FileType denite-filter call s:denite_filter_my_settings()
    # function! s:denite_filter_my_settings() abort
    #     imap <silent><buffer> <C-c> <Plug>(denite_filter_quit)
    #     imap <silent><buffer> jj <Plug>(denite_filter_quit)
    # endfunction

[[plugins]]
repo = 'neoclide/coc-denite'
on_source = 'denite.nvim'
hook_add = '''
    nmap <silent> [denite]o :<C-u>Denite coc-command -start-filter -split=floating<CR>
    nmap <silent> [denite]t :<C-u>Denite coc-symbols -start-filter -split=floating<CR>
'''

[[plugins]]
repo = 'delphinus/vim-denite-node-modules'
on_source = 'denite.nvim'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_event = ['BufEnter']
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_i = 1
hook_source = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#expand_word_boundary = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#snippets_directory = $XDG_CONFIG_HOME . '/nvim/snippets'
'''
on_ft = ['snippet']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ["markdown", "pandoc.markdown", "rmd"]
build = 'sh -c "cd app & yarn install"'
hook_add = '''
    let g:mkdp_auto_close = 0
    let g:mkdp_markdown_css = $XDG_CONFIG_HOME . '/nvim/plugins/markdown.css'
    let g:mkdp_preview_options = {
        \ 'uml': {}
    \ }
'''

[[plugins]]
repo = 'mattn/vim-sonictemplate'
on_cmd = ['Template']
hook_add = '''
    let g:sonictemplate_vim_template_dir = ["~/.config/nvim/template"]
'''

[[plugins]]
repo = 'jackguo380/vim-lsp-cxx-highlight'
on_ft = ['c', 'cpp']

[[plugins]]
repo = 'kristijanhusak/vim-carbon-now-sh'
on_cmd = 'CarbonNowSh'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'vue', 'javascriptreact', 'typescriptreact', 'markdown']
hook_add = '''
    let g:user_emmet_install_global = 1
'''

[[plugins]]
repo = 'liuchengxu/vista.vim'
depends = ['coc.nvim', 'lightline.vim']
hook_add = '''
    nmap <silent> <F8> :<C-u>Vista coc<CR>
    let g:vista_sidebar_width = 40
'''

[[plugins]]
repo = 'yuezk/vim-js'
on_ft = ['javascript', 'javascriptreact']

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'
on_ft = ['typescript', 'typescriptreact']

[[plugins]]
repo = 'maxmellon/vim-jsx-pretty'
on_ft = ['javascriptreact', 'typescriptreact']
depends = ['vim-js', 'yats.vim']

[[plugins]]
repo = 'numirias/semshi'
on_ft = ['python']

[[plugins]]
repo = 'mtdl9/vim-log-highlighting'
on_ft = ['log']

[[plugins]]
repo = 'gianarb/vim-flux'
on_ft = ['flux']
