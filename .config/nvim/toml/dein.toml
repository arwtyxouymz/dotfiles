[[plugins]]
repo = 'Shougo/dein.vim'

#[[plugins]]
#repo = 'w0ng/vim-hybrid'
#hook_add = '''
#    set background=dark
#'''
#
#[[plugins]]
#repo = 'sheerun/vim-wombat-scheme'
#hook_add = '''
#    colorscheme wombat
#'''

[[plugins]]
repo = 'joshdick/onedark.vim'
hook_add = '''
'''

[[plugins]]
repo = 'KabbAmine/yowish.vim'
hook_source = '''
    set background=dark
    let g:yowish = {
        \ 'comment_italic': 1
    \ }
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
    let g:webdevicons_enable_airline_tabline = 1
    let g:webdevicons_enable_denite = 1
    let g:webdevicons_enable_airline_statusline = 1
'''

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
    let g:polyglot_disabled = ['jsx', 'latex', 'tsx']
'''

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
    " 行の最初の文字の前にコメント文字をトグル
    nmap <Leader>, <Plug>(caw:hatpos:toggle)
    vmap <Leader>, <Plug>(caw:hatpos:toggle)
    " 行頭にコメントをトグル
    nmap <Leader>c<leader> <Plug>(caw:hatpos:comment)
    vmap <Leader>c<leader> <Plug>(caw:hatpos:comment)
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    let g:airline_theme = 'badwolf'
    " タブラインの表示
    let g:airline#extensions#tabline#enabled = 1
    " （タブが一個の場合）バッファのリストをタブラインに表示する機能をON
    let g:airline#extensions#tabline#show_buffers = 1
    " 0でそのタブで開いてるウィンドウ数、1で左のタブから連番
    let g:airline#extensions#tabline#tab_nr_type = 1
    " パワーラインフォントの使用
    let g:airline_powerline_fonts = 1
    " aleの表示
    let g:airline#extensions#ale#enabled = 1
    " Do not collapse the status line while having multiple windows
    let g:airline_inactive_collapse = 0
    " tagbarの表示
    let g:airline#extensions#tagbar#enabled = 1
    " virtualenvを有効
    let g:airline#extensions#virtualenv#enabled = 1
    " Language Clientを有効化
    let g:airline#extensions#languageclient#enabled = 1

    let g:airline#extensions#coc#enabled = 1
    let g:airline#extensions#coc#error_symbol = 'E:'
    let g:airline#extensions#coc#warning_symbol = 'W:'
    let g:airline#extensions#coc#stl_format_err = '%E{[%e(#%fe)]}'
    let g:airline#extensions#coc#stl_format_warn = '%E{[%e(#%fe)]}'
'''
depends = ['vim-airline_themes']

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'shougo/neosnippet-snippets'

# [[plugins]]
# repo = 'w0rp/ale'
# hook_add = '''
#     " シンボルカラムを表示したままにする
#     let g:ale_sign_column_always = 1
#     " 保存時に整形してくれる
#     let g:ale_fix_on_save = 1
#     " 補完してくれる
#     let g:ale_completion_enabled = 1
#     " エラー行に表示するマーク
#     let g:ale_sign_error = '⨉'
#     let g:ale_sign_warning = '⚠'
#     " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
#     let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
#     let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
#     let g:ale_linters = {
#         \   'python': [''],
#         \   'c' : [],
#         \   'cpp' : [],
#     \}
# '''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nmap [figitive] <nop>
    map <leader>g [figitive]
    noremap <silent> [figitive]s :<c-u>Gstatus<cr>
    noremap <silent> [figitive]d :<c-u>Gdiff<cr>
    noremap <silent> [figitive]r :<c-u>Gread<cr>
    noremap <silent> [figitive]b :<c-u>Gblame<cr>
    noremap <silent> [figitive]l :<c-u>Glog<cr>
    noremap [figitive]c :Gcommit -m 
    noremap [figitive]p :Gpush origin 
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    set updatetime=100
'''

[[plugins]]
repo = 'shougo/context_filetype.vim'

[[plugins]]
repo = 'yggdroot/indentline'
hook_add = '''
    set list lcs=tab:\|\
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
merge = '0'
hook_add = '''
   source $XDG_CONFIG_HOME/nvim/rc/plugins/coc.rc.vim
'''

# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# build = 'bash install.sh'
# rev = 'next'
# hook_add = '''
#     source $XDG_CONFIG_HOME/nvim/rc/plugins/LanguageClient-neovim.rc.vim
#     nnoremap <F5> :call LanguageClient_contextMenu()<CR>
#     " Or map each action separately
#     " シンボルのドキュメントを軽く見れる
#     nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
#     " シンボルの定義/実装を行き来できる
#     nnoremap <silent> <M-j> :call LanguageClient#textDocument_definition()<CR>
#     " シンボルの参照先を見つけられる
#     nnoremap <silent> <M-r> :call LanguageClient#textDocument_references({'includeDeclaration': v:false})<CR>
#     " documentHighlight => 謎
#     augroup LanguageClient_config
#         autocmd!
#         autocmd BufEnter * let b:Plugin_LanguageClient_started = 0
#         autocmd User LanguageClientStarted setl signcolumn=yes
#         autocmd User LanguageClientStarted let b:Plugin_LanguageClient_started = 1
#         autocmd User LanguageClientStopped setl signcolumn=auto
#         autocmd User LanguageClientStopped let b:Plugin_LanguageClient_started = 0
#         autocmd CursorMoved * if b:Plugin_LanguageClient_started | sil call LanguageClient#textDocument_documentHighlight() | endif
#     augroup END
#     " 次の同階層ドキュメントシンボル
#     nnoremap <silent> xk :call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'L'})<cr>
#     " 前の同階層ドキュメントシンボル
#     nnoremap <silent> xj :call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'R'})<cr>
#     " 最初の子階層ドキュメントシンボル
#     nnoremap <silent> xh :call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'D'})<cr>
#     " 親階層のドキュメントシンボル
#     nnoremap <silent> xu :call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'U'})<cr>
#     " フォーマット
#     function! C_init()
#         setl formatexpr=LanguageClient#textDocument_rangeFormatting()
#     endf
#     autocmd FileType c,cpp,cuda,objc :call C_init()
# '''

[[plugins]]
repo = 'thinca/vim-template'
hook_add = '''
    let g:template_basedir = '~/.config/nvim/autoload'
    let g:template_free_pattern = 'template'
    " テンプレート中に含まれる文字を置き換える
    autocmd MyAutoCmd User plugin-template-loaded call s:template_keywords()
    function! s:template_keywords()
        silent! %s/<+DATE+>/\=strftime('%Y-%m-%d %T')/g
        silent! %s/<+FILENAME+>/\=fnamemodify(expand('%:r'), ":t:r")/g
    endfunction
    " テンプレート中に含まれる'<+CURSOR+>'にカーソルを移動
    autocmd MyAutoCmd User plugin-template-loaded
               \   if search('<+CURSOR+>')
               \ |   silent! execute 'normal! "_da>'
               \ | endif
'''

[[plugins]]
repo = 'tpope/vim-surround'
