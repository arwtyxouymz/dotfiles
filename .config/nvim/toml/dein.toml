[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
    set background=dark
'''

[[plugins]]
repo = 'sheerun/vim-wombat-scheme'

[[plugins]]
repo = 'sheerun/vim-polyglot'
hook_add = '''
    let g:polyglot_disabled = ['jsx', 'latex']
'''

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
    " 行の最初の文字の前にコメント文字をトグル
    nmap <Leader>, <Plug>(caw:hatpos:toggle)
    vmap <Leader>, <Plug>(caw:hatpos:toggle)
    " 行頭にコメントをトグル
    nmap <Leader>c<leader> <Plug>(caw:hatpos:comment)
    vmap <Leader>c<leader> <Plug>(caw:hatpos:comment)
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    " タブラインの表示
    let g:airline#extensions#tabline#enabled = 1
    " （タブが一個の場合）バッファのリストをタブラインに表示する機能をON
    let g:airline#extensions#tabline#show_buffers = 1
    " 0でそのタブで開いてるウィンドウ数、1で左のタブから連番
    let g:airline#extensions#tabline#tab_nr_type = 1
    " パワーラインフォントの使用
    let g:airline_powerline_fonts = 1
    " aleの表示
    let g:airline#extensions#ale#enabled = 1
    " Do not collapse the status line while having multiple windows
    let g:airline_inactive_collapse = 0
    " tagbarの表示
    let g:airline#extensions#tagbar#enabled = 1
    " virtualenvを有効
    let g:airline#extensions#virtualenv#enabled = 1
'''
depends = ['vim-airline_themes']

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'shougo/neosnippet-snippets'

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nmap [figitive] <nop>
    map <leader>g [figitive]
    noremap <silent> [figitive]s :<c-u>Gstatus<cr>
    noremap <silent> [figitive]d :<c-u>Gdiff<cr>
    noremap <silent> [figitive]r :<c-u>Gread<cr>
    noremap <silent> [figitive]b :<c-u>Gblame<cr>
    noremap <silent> [figitive]l :<c-u>Glog<cr>
    noremap [figitive]c :Gcommit -m 
    noremap [figitive]p :Gpush origin 
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
hook_add = '''
    nnoremap <silent><leader>f :Defx -show-ignored-files<CR>
    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        " Define mappings
        nnoremap <silent><buffer><expr> <CR>
                   \ defx#do_action('open')
        nnoremap <silent><buffer><expr> c
                   \ defx#do_action('copy')
        nnoremap <silent><buffer><expr> m
                   \ defx#do_action('move')
        nnoremap <silent><buffer><expr> p
                   \ defx#do_action('paste')
        nnoremap <silent><buffer><expr> l
                   \ defx#do_action('open')
        nnoremap <silent><buffer><expr> E
                   \ defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> P
                   \ defx#do_action('open', 'pedit')
        nnoremap <silent><buffer><expr> K
                   \ defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> N
                   \ defx#do_action('new_file')
        nnoremap <silent><buffer><expr> M
                   \ defx#do_action('new_multiple_files')
        nnoremap <silent><buffer><expr> C
                   \ defx#do_action('toggle_columns',
                   \                'mark:filename:type:size:time')
        nnoremap <silent><buffer><expr> S
                   \ defx#do_action('toggle_sort', 'time')
        nnoremap <silent><buffer><expr> d
                   \ defx#do_action('remove')
        nnoremap <silent><buffer><expr> r
                   \ defx#do_action('rename')
        nnoremap <silent><buffer><expr> !
                   \ defx#do_action('execute_command')
        nnoremap <silent><buffer><expr> x
                   \ defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> yy
                   \ defx#do_action('yank_path')
        nnoremap <silent><buffer><expr> .
                   \ defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> ;
                   \ defx#do_action('repeat')
        nnoremap <silent><buffer><expr> h
                   \ defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> ~
                   \ defx#do_action('cd')
        nnoremap <silent><buffer><expr> q
                   \ defx#do_action('quit')
        nnoremap <silent><buffer><expr> <Space>
                   \ defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> *
                   \ defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> j
                   \ line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k
                   \ line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> <C-l>
                   \ defx#do_action('redraw')
        nnoremap <silent><buffer><expr> <C-g>
                   \ defx#do_action('print')
        nnoremap <silent><buffer><expr> cd
                   \ defx#do_action('change_vim_cwd')
    endfunction
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
    set updatetime=100
'''

[[plugins]]
repo = 'shougo/context_filetype.vim'

[[plugins]]
repo = 'yggdroot/indentline'
hook_add = '''
    set list lcs=tab:\|\
'''

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = 'bash install.sh'
rev = 'next'
hook_add = '''
    source $XDG_CONFIG_HOME/nvim/rc/plugins/LanguageClient-neovim.rc.vim
    nnoremap <F5> :call LanguageClient_contextMenu()<CR>
    " Or map each action separately
    " シンボルのドキュメントを軽く見れる
    nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
    " シンボルの定義/実装を行き来できる
    nnoremap <silent> <M-j> :call LanguageClient#textDocument_definition()<CR>
    " シンボルの参照先を見つけられる
    nnoremap <silent> <M-r> :call LanguageClient#textDocument_references({'includeDeclaration': v:false})<CR>
    " documentHighlight => 謎
    augroup LanguageClient_config
        autocmd!
        autocmd BufEnter * let b:Plugin_LanguageClient_started = 0
        autocmd User LanguageClientStarted setl signcolumn=yes
        autocmd User LanguageClientStarted let b:Plugin_LanguageClient_started = 1
        autocmd User LanguageClientStopped setl signcolumn=auto
        autocmd User LanguageClientStopped let b:Plugin_LanguageClient_started = 0
        autocmd CursorMoved * if b:Plugin_LanguageClient_started | sil call LanguageClient#textDocument_documentHighlight() | endif
    augroup END
    " 次の同階層ドキュメントシンボル
    nnoremap <silent> xk :call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'L'})<cr>
    " 前の同階層ドキュメントシンボル
    nnoremap <silent> xj :call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'R'})<cr>
    " 最初の子階層ドキュメントシンボル
    nnoremap <silent> xh :call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'D'})<cr>
    " 親階層のドキュメントシンボル
    nnoremap <silent> xu :call LanguageClient#findLocations({'method':'$ccls/navigate','direction':'U'})<cr>
    " フォーマット
    function! C_init()
        setl formatexpr=LanguageClient#textDocument_rangeFormatting()
    endf
    autocmd FileType c,cpp,cuda,objc :call C_init()
'''

[[plugins]]
repo = 'thinca/vim-template'
hook_add = '''
    let g:template_basedir = '~/.config/nvim/autoload'
    let g:template_free_pattern = 'template'
    " テンプレート中に含まれる文字を置き換える
    autocmd MyAutoCmd User plugin-template-loaded call s:template_keywords()
    function! s:template_keywords()
        silent! %s/<+DATE+>/\=strftime('%Y-%m-%d %T')/g
        silent! %s/<+FILENAME+>/\=fnamemodify(expand('%:r'), ":t:r")/g
    endfunction
    " テンプレート中に含まれる'<+CURSOR+>'にカーソルを移動
    autocmd MyAutoCmd User plugin-template-loaded
               \   if search('<+CURSOR+>')
               \ |   silent! execute 'normal! "_da>'
               \ | endif
'''

[[plugins]]
repo = 'tpope/vim-surround'
