snippet BinarySearch
    #[doc = " Self implemented version of lower_bound/upper_bound in c++"]
    #[doc = " This is from https://github.com/hatoo/competitive-rust-snippets/blob/master/src/binary_search.rs"]
    pub trait BinarySearch<T> {
        fn my_binary_search(&self, x: &T) -> usize;
        fn is_ok(&self, index: usize, x: &T) -> bool;
    }
    impl<T: Ord> BinarySearch<T> for [T] {
        fn my_binary_search(&self, x: &T) -> usize {
            let mut ng = -1;
            let mut ok = self.len() as isize;
            while (ok - ng).abs() > 1 {
                let mid = (ok + ng) / 2;
                if self.is_ok(mid as usize, x) {
                    ok = mid;
                } else {
                    ng = mid;
                }
            }
            ok as usize
        }
        fn is_ok(&self, index: usize, x: &T) -> bool {
            match self[index].cmp(x) {
                Ordering::Less => false,
                Ordering::Equal | Ordering::Greater => true,
            }
        }
    }

snippet BitSet
    #[doc = " This is from https://github.com/hatoo/competitive-rust-snippets/blob/master/src/bitset.rs"]
    const TRUE: &'static bool = &true;
    const FALSE: &'static bool = &false;
    #[derive(Clone, Debug)]
    #[doc = " Efficient bool collection"]
    pub struct BitSet {
        buf: Vec<u64>,
        size: usize,
    }
    impl BitSet {
        pub fn new(size: usize) -> BitSet {
            BitSet {
                buf: vec![0; (size + 63) / 64],
                size: size,
            }
        }
        pub fn set(&mut self, i: usize, b: bool) {
            assert!(i < self.size);
            if b {
                self.buf[i >> 6] |= 1 << (i & 63);
            } else {
                self.buf[i >> 6] |= !(1 << (i & 63));
            }
        }
        pub fn count_ones(&self) -> u32 {
            self.buf.iter().map(|x| x.count_ones()).sum()
        }
        fn chomp(&mut self) {
            let r = self.size & 63;
            if r != 0 {
                if let Some(x) = self.buf.last_mut() {
                    let d = 64 - r;
                    *x = (*x << d) >> d;
                }
            }
        }
    }
    impl std::ops::Index<usize> for BitSet {}
    impl std::ops::ShlAssign<usize> for BitSet {}
    impl std::ops::Shl<usize> for BitSet {}
    impl std::ops::ShrAssign<usize> for BitSet {}
    impl std::ops::Shr<usize> for BitSet {}
    impl std::ops::BitAndAssign<&'a BitSet> for BitSet {}
    impl std::ops::BitAnd<&'a BitSet> for BitSet {}
    impl std::ops::BitOrAssign<&'a BitSet> for BitSet {}
    impl std::ops::BitOr<&'a BitSet> for BitSet {}
    impl std::ops::BitXorAssign<&'a BitSet> for BitSet {}
    impl std::ops::BitXor<&'a BitSet> for BitSet {}

snippet LexicalPermutation
    #[doc = " Ported from [bluss/permutohedron](https://github.com/bluss/permutohedron)"]
    pub trait LexicalPermutation {
        #[doc = " Return \\'true\\' if the slice was permuted, \\'false\\' if it is already "]
        #[doc = " at the last ordered permutation."]
        fn next_permutation(&mut self) -> bool;
        #[doc = " Return \\'true\\' if the slice was permuted, \\'false\\' if it is already "]
        #[doc = " at the first ordered permutation."]
        fn prev_permutation(&mut self) -> bool;
    }
    impl<T> LexicalPermutation for [T]
    where
        T: Ord,
    {
        #[doc = " Original author in Rust: Thomas Backman <serenity@exscape.org>"]
        fn next_permutation(&mut self) -> bool {
            if self.len() < 2 {
                return false;
            }
            let mut i = self.len() - 1;
            while i > 0 && self[i - 1] >= self[i] {
                i -= 1;
            }
            if i == 0 {
                return false;
            }
            let mut j = self.len() - 1;
            while j >= i && self[j] <= self[i - 1] {
                j -= 1;
            }
            self.swap(j, i - 1);
            self[i..].reverse();
            true
        }
        #[doc = " Original author in Rust: Thomas Backman <serenity@exscape.org>"]
        fn prev_permutation(&mut self) -> bool {
            if self.len() < 2 {
                return false;
            }
            let mut i = self.len() - 1;
            while i > 0 && self[i - 1] <= self[i] {
                i -= 1;
            }
            if i == 0 {
                return false;
            }
            self[i..].reverse();
            let mut j = self.len() - 1;
            while j >= i && self[j - 1] < self[i - 1] {
                j -= 1;
            }
            self.swap(i - 1, j);
            true
        }
    }

snippet UFT
    struct UnionFindTree {
        parent: Vec<usize>,
        rank: Vec<usize>,
    }
    impl UnionFindTree {
        fn new(n: usize) -> UnionFindTree {
            UnionFindTree {
                parent: (0..n).collect(),
                rank: vec![0; n],
            }
        }
        fn root(&mut self, x: usize) -> usize {
            if self.parent[x] == x {
                x
            } else {
                let p = self.parent[x];
                let pp = self.root(p);
                self.parent[x] = pp;
                pp
            }
        }
        fn merge(&mut self, x: usize, y: usize) {
            let x = self.root(x);
            let y = self.root(y);
            if x == y {
                return;
            }
            if self.rank[x] < self.rank[y] {
                self.parent[x] = y;
            } else {
                self.parent[y] = x;
                if self.rank[x] == self.rank[y] {
                    self.rank[x] += 1;
                }
            }
        }
        fn same(&mut self, x: usize, y: usize) -> bool {
            self.root(x) == self.root(y)
        }
    }

snippet gcd
    pub fn gcd(a: u64, b: u64) -> u64 {
        if a % b == 0 {
            b
        } else {
            gcd(b, a % b)
        }
    }

snippet lcm
    pub fn gcd(a: u64, b: u64) -> u64 {
        if a % b == 0 {
            b
        } else {
            gcd(b, a % b)
        }
    }
    pub fn lcm(a: u64, b: u64) -> u64 {
        a / gcd(a, b) * b
    }

