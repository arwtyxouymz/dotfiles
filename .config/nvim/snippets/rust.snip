snippet LexicalPermutation
    #[doc = " Ported from [bluss/permutohedron](https://github.com/bluss/permutohedron)"]
    pub trait LexicalPermutation {
        #[doc = " Return \\'true\\' if the slice was permuted, \\'false\\' if it is already "]
        #[doc = " at the last ordered permutation."]
        fn next_permutation(&mut self) -> bool;
        #[doc = " Return \\'true\\' if the slice was permuted, \\'false\\' if it is already "]
        #[doc = " at the first ordered permutation."]
        fn prev_permutation(&mut self) -> bool;
    }
    impl<T> LexicalPermutation for [T]
    where
        T: Ord,
    {
        #[doc = " Original author in Rust: Thomas Backman <serenity@exscape.org>"]
        fn next_permutation(&mut self) -> bool {
            if self.len() < 2 {
                return false;
            }
            let mut i = self.len() - 1;
            while i > 0 && self[i - 1] >= self[i] {
                i -= 1;
            }
            if i == 0 {
                return false;
            }
            let mut j = self.len() - 1;
            while j >= i && self[j] <= self[i - 1] {
                j -= 1;
            }
            self.swap(j, i - 1);
            self[i..].reverse();
            true
        }
        #[doc = " Original author in Rust: Thomas Backman <serenity@exscape.org>"]
        fn prev_permutation(&mut self) -> bool {
            if self.len() < 2 {
                return false;
            }
            let mut i = self.len() - 1;
            while i > 0 && self[i - 1] <= self[i] {
                i -= 1;
            }
            if i == 0 {
                return false;
            }
            self[i..].reverse();
            let mut j = self.len() - 1;
            while j >= i && self[j - 1] < self[i - 1] {
                j -= 1;
            }
            self.swap(i - 1, j);
            true
        }
    }

snippet gcd
    pub fn gcd(a: u64, b: u64) -> u64 {
        if a % b == 0 {
            b
        } else {
            gcd(b, a % b)
        }
    }

snippet lcm
    pub fn gcd(a: u64, b: u64) -> u64 {
        if a % b == 0 {
            b
        } else {
            gcd(b, a % b)
        }
    }
    pub fn lcm(a: u64, b: u64) -> u64 {
        a / gcd(a, b) * b
    }

