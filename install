#!/usr/bin/env bash

##################################################
# Util functions
##################################################
# Get OS name in lowercase
ostype()
{
    uname | tr '[:upper:]' '[:lower:]'
}

os_detect()
{
    case "$(ostype)" in
        *'linux'*)
            PLATFORM='linux' ;;
        *'darwin'*)
            PLATFORM='darwin' ;;
        *)
            PLATFORM='unknown' ;;
    esac
}

is_debug()
{
    if [ "$DEBUG" = 1 ]; then
        return 0
    else
        return 1
    fi
}

is_exists()
{
    type "$1" > /dev/null 2>&1
    return $?
}

##################################################
# Output text
##################################################
echo_header()
{
    printf " \033[37;1m%s\033[m\n" "$*"
}

echo_warning()
{
    printf " \033[31m%s\033[m\n" "$*"
}

echo_error()
{
    printf " \033[31m%s\033[m\n" "✖ $*" 1>&2
}

echo_done()
{
    printf " \033[37;1m%s\033[m...\033[32mOK\033[m\n" "✔ $*"
}

echo_arrow()
{
    printf " \033[37;1m%s\033[m\n" "➜ $*"
}

newline()
{
    printf "\n"
}

##################################################
# Logging
##################################################

ink()
{
    if [ "$#" -eq 0 -o "$#" -gt 2 ]; then
        echo "Usage: ink <color> <text>"
        echo "Colors:"
        echo "  black, white, red, green, lightgreen, yellow, purple, cyan, gray"
        return 1
    fi

    local open="\033["
    local close="${open}0m"
    local black="0;30m"
    local red="1;31m"
    local green="1;32m"
    local lightgreen="1;92m"
    local yellow="1;33m"
    local blue="1;34m"
    local purple="1;35m"
    local cyan="1;36m"
    local gray="0;37m"
    local white="$close"

    local text="$1"
    local color="$close"

    if [ "$#" -eq 2 ]; then
        text="$2"
        case "$1" in
            black | red | green | lightgreen | yellow | purple | cyan | gray | white)
                eval color="\$$1"
                ;;
        esac
    fi
    
    printf "${open}${color}${text}${close}"
}

logging()
{
    if [ "$#" -eq 0 -o "$#" -gt 2 ]; then
        echo "Usage: logging <fmt> <msg>"
        echo "Formatting Options:"
        echo "  TITLE, ERROR, WARN, INFO, SUCCESS"
        return 1
    fi

    local text="$2"
    local color=

    case "$1" in
        TITLE)
            color=yellow
            ;;
        ERROR | WARN)
            color=red
            ;;
        INFO)
            color=blue
            ;;
        SUCCESS)
            color=lightgreen
            ;;
        *)
            echo "<|1|> Didn't match anything"
    esac

    timestamp()
    {
        ink gray "["
        ink purple "$(date +%H:%M:%S)"
        ink gray "] "
    }

    timestamp; ink "$color" "$text"; echo
}

log_title()
{
    logging TITLE "$1"
}

log_error()
{
    logging ERROR "$1" 1>&2
}

log_warn()
{
    logging WARN "$1"
}

log_info()
{
    logging INFO "$1"
}

log_pass()
{
    logging SUCCESS "$1"
}

##################################################
# Core functions
##################################################

dotfiles_download()
{
    if [ -d "$DOTPATH" ]; then
        log_error "$DOTPATH: already exists"
        exit 1
    fi

    newline
    echo_header "Downloading dotfiles ..."

    if is_debug; then
        :
    else
        if is_exists "git"; then
            # git
            git clone "$DOTFILES_REPOSITORY" "$DOTPATH"
        elif is_exists "curl" || is_exists "wget"; then
            # curl or wget
            local tarball="https://github.com/arwtyxouymz/dotfiles/archive/master.tar.gz"
            if is_exists "curl"; then
                curl -L "$tarball"
            elif is_exists "wget"; then
                wget -O - "$tarball"
            fi | tar xvz

            if [ ! -d dotfiles-master ]; then
                log_error "dotfiles_master: not found"
                exit 1
            fi
            command mv -f dotfiles-master "$DOTPATH"
        else
            log_error "curl or wget required"
            exit 1
        fi
    fi
    newline && echo_done "Download"
}

dotfiles_deploy()
{
    newline
    echo_header "Deploying dotfiles....."

    if [ ! -d $DOTPATH ]; then
        log_error "$DOTPATH: not found"
        exit 1
    fi

    cd "$DOTPATH"

    if is_debug; then
        :
    else
        if [ -f Makefile ]; then
            make deploy
        else
            log_error "Makefile: not found"
            exit 1
        fi
    fi
    newline && echo_done "Deploy"
}

dotfiles_initialize()
{
    if [ "$1" != "init" ]; then
        return
    fi
    newline
    echo_header "Initializing dotfiles....."

    if is_debug; then
        :
    else
        if [ -f Makefile ]; then
            make init
        else
            log_error "Makefile: not found"
            exit 1
        fi
    fi
    newline && echo_done "Initialize"
}

dotfiles_install()
{
    # 1. Download the repository
    # ==> downloading
    # Priority: git > curl > wget
    dotfiles_download &&

    # 2. Deploy dotfiles to home directory
    # ==> deploying
    dotfiles_deploy &&

    # 3. Execute all sh files within $DOTPATH/etc/init/
    # ==> initializing
    dotfiles_initialize "$@"
    exit 0
}


##################################################
# Dotfiles
##################################################

if [ -z "${DOTPATH:-}" ]; then
    export DOTPATH=$HOME/dotfiles
fi

export DOTFILES_REPOSITORY="https://github.com/arwtyxouymz/dotfiles.git"

# This logo is from https://github.com/b4b4r07/dotfiles/blob/v0.1/etc/install
dotfiles_logo='
      | |     | |  / _(_) |           
    __| | ___ | |_| |_ _| | ___  ___  
   / _` |/ _ \| __|  _| | |/ _ \/ __| 
  | (_| | (_) | |_| | | | |  __/\__ \ 
   \__,_|\___/ \__|_| |_|_|\___||___/ 
  *** WHAT IS INSIDE? ***
  1. Download https://github.com/arwtyxouymz/dotfiles.git
  2. Symlinking dot files to your home directory
  3. Execute all sh files within `etc/init/` (optional)
  See the README for documentation.
  https://github.com/arwtyxouymz/dotfiles.git
  Copyright (c) 2014 "BABAROT" aka @b4b4r07
  Licensed under the MIT license.
'

main()
{
    if echo "$-" | grep -q i ; then
        # -> like 'source $DOTPATH/install'
        echo "Does not support interactive shell"
        echo "Change to login shell"
        return
    fi

    # 3 patterns
    # -> cat $DOTPATH/install | bash
    # -> bash -c "$(cat $DOTPATH/install)"
    # -> bash $DOTPATH/install

    if [ "$0" = "${BASH_SOURCE:-}" ]; then
        #-> bash $DOTPATH/install
        echo_error "Don't support 'bash install'"
        echo "Use one of following commands:"
        echo "  cat install | bash"
        echo "  bash -c \$(cat install)"
        return
    fi

    if [ -n "${BASH_EXECUTION_STRING:-}" ] || [ -p /dev/stdin ]; then
        # -> cat $DOTPATH/install | bash
        # -> bash -c $(cat $DOTPATH/install)
        trap "echo_error 'terminated'; exit 1" 2 

        echo "$dotfiles_logo"
        dotfiles_install "$@"
    fi

    # Restart shell if specified "bash -c $(curl -L {URL})"
    # not restart:
    #   curl -L {URL} | bash
    if [ -p /dev/stdin ]; then
        echo_warning "Now continue with Rebooting your shell"
    else
        newline
        echo_arrow "Restarting your shell...."
        exec ${SHELL}
    fi
}

main
