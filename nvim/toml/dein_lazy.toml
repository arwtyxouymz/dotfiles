[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_source = '''
    call deoplete#enable()
    source $XDG_CONFIG_HOME/nvim/rc/plugins/deoplete.rc.vim
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
hook_add = '''
    nmap <Space> [denite]
    nmap <Space>p [deniteProject]
    nmap <silent> [denite]b :<C-u>Denite buffer<CR>
    nmap <silent> [denite]g :<C-u>Denite grep<CR>
    nmap <silent> [denite]m :<C-u>Denite file_mru<CR> <silent> <C-u><C-y> :<C-u>Denite neoyank<CR>
    nmap <silent> [denite]f :<C-u>Denite file_rec<CR>
    nmap <silent> [denite]d :<C-u>Denite directory_rec<CR>

    nmap <silent> [deniteProject]b :<C-u>Denite buffer<CR>
    nmap <silent> [deniteProject]g :<C-u>Denite grep<CR>
    nmap <silent> [deniteProject]m :<C-u>Denite file_mru<CR> <silent> <C-u><C-y> :<C-u>Denite neoyank<CR>
    nmap <silent> [deniteProject]f :<C-u>Denite file_rec<CR>
    nmap <silent> [deniteProject]d :<C-u>Denite directory_rec<CR>
'''
hook_post_source = '''
    call denite#custom#var('file_rec', 'command', ['ag', '-U', '-p /Users/ryutaro/.agignore', '-S', '--hidden', '--follow', '--nocolor', '--nogroup', '-g', ''])
    call denite#custom#var('grep', 'command', ['ag'])
    call denite#custom#var('grep', 'recursive_opts', [])
    call denite#custom#var('grep', 'pattern_opt', [])
    call denite#custom#var('grep', 'default_opts', ['--follow', '--no-group', '--no-color'])
    call denite#custom#map('insert', "<C-j>", '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert', "<C-k>", '<denite:move_to_previous_line>', 'noremap')
'''

[[plugins]]
repo = 'Shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_source = '''
    let g:echodoc#type = 'signature'
    call echodoc#enable()
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/neomru.vim'
on_source = 'denite.nvim'

[[plugins]]
repo = 'Shougo/neosnippet'
on_i = 1
hook_source = '''
    imap <C-k> <Plug>(neosnippet_expand_or_jump)
    smap <C-k> <Plug>(neosnippet_expand_or_jump)
    xmap <C-k> <Plug>(neosnippet_expand_target)
    if has('conceal')
      set conceallevel=2 concealcursor=niv
    endif
    let g:neosnippet#enable_snipmate_compatibility = 1
    let g:neosnippet#enable_completed_snippet = 1
    let g:neosnippet#expand_word_boundary = 1
    let g:neosnippet#enable_completed_snippet = 1
'''
hook_add = '''
    let g:neosnippet#snippets_directory = "$XDG_CONFIG_HOME/nvim/autoload/snippets/"
'''
on_ft = ['snippet']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'majutsushi/tagbar'
on_event = ['BufEnter']
hook_add = '''
    nmap <F8> :TagbarToggle<CR>
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
    " .mdもマークダウンとして登録
    autocmd BufRead,BufNewFile *.md set filetype=markdown
    " 折りたたみしない
    let g:vim_markdown_folding_disabled = 1
'''
on_ft = ["md", "markdown"]

[[plugins]]
repo = 'kannokanno/previm'
on_ft = ["md", "markdown"]
depends = ['open-browser.vim']
hook_add = '''
  " realtime preview. 0 is disable(default).
  let g:previm_enable_realtime = 1
  " don't show header
  let g:previm_show_header = 0
  " デフォルトのCSSに加えて独自のCSSも適用する
  " let g:previm_custom_css_path = '/Users/ryutaro/.config/nvim/dein/repos/github.com/kannokanno/previm/preview/css/icon.css'
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_ft = ["md", "markdown"]

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = ['toml']

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'blade', 'vue']

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml']
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'ponko2/deoplete-fish'
on_ft = ['fish']
depends = ['deoplete.nvim']

[[plugins]]
repo = 'thinca/vim-quickrun'
on_event = ['BufEnter']
hook_add = '''
    let g:quickrun_config = get(g:, 'quickrun_config', {})
    let g:quickrun_config._ = {
          \ 'runner':                          'vimproc',
          \ 'runner/vimproc/updatetime':       60,
          \ 'outputter':                       'error',
          \ 'outputter/error/success':         'buffer',
          \ 'outputter/error/error':           'quickfix',
          \ 'outputter/buffer/split':          ':rightbelow 8sp',
          \ 'outputter/buffer/close_on_empty': 1,
          \}
'''
depends = ['vimproc.vim']

[[plugins]]
repo = 'Shougo/vimproc.vim'
on_event = ['BufEnter']
build = 'make'

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_event = ['BufEnter']
hook_add = '''
    " Start interactive EasyAlign in visual mode (e.g. vipga)
    xmap ga <Plug>(EasyAlign)
    " Start interactive EasyAlign for a motion/text object (e.g. gaip)
    nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'cohama/lexima.vim'
on_i = 1

# [[plugins]]
# repo = 'osyo-manga/vim-precious'
# on_ft = ['html', 'toml', 'md']
# depends = ['context_filetype.vim']

# [[plugins]]
# repo = 'terryma/vim-multiple-cursors'
# on_event = ['BufEnter']
# hook_add = '''
#     " Default mapping
#     let g:multi_cursor_next_key='<C-m>'
#     let g:multi_cursor_prev_key='<C-p>'
#     let g:multi_cursor_skip_key='<C-x>'
#     let g:multi_cursor_quit_key='<Esc>'
# '''

[[plugins]]
repo = 'wellle/tmux-complete.vim'
on_ft = 'tmux'
hook_add = '''
    let g:tmuxcomplete#trigger = ""
'''
