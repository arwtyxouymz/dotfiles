# deoplete php extension
[[plugins]]
repo = 'lvht/phpcd.vim'
on_ft = ['php', 'blade']
hook_add = '''
    autocmd FileType php setlocal completeopt-=preview
    let g:deoplete#ignore_sources = get(g:, 'deoplete#ignore_sources', {})
    let g:deoplete#ignore_sources.php = ['omni']
    let g:phpcd_disable_modifier = 0
'''
depends = ['deoplete.nvim']

# rename, create getter and setter, and extract use statement, constants, class properties
[[plugins]]
repo = 'adoy/vim-php-refactoring-toolbox'
on_ft = ['php']
hook_add = '''
    " プロパティのデフォルトのvisibility(public/private)をprivateに設定
    let g:vim_php_refactoring_default_property_visibility = 'private'
    " メソッドのデフォルトのvisibility(public/private)をprivateに設定
    let g:vim_php_refactoring_default_method_visibility = 'private'
    " (public/private)のユーザー検証を無効にする
    let g:vim_php_refactoring_auto_validate_visibility = 1
    " phpのドキュメントを表示
    let g:vim_php_refactoring_phpdoc = "pdv#DocumentCurrentLine"
    " デフォルトのキーマッピングを削除
    let g:vim_php_refactoring_use_default_mapping = 0
    """" キーマッピング """"
    " ,rlv でローカル変数名の変更
    nnoremap <leader>rlv :call PhpRenameLocalVariable()<CR>
    " ,rcv でクラス変数名の変更
    nnoremap <leader>rcv :call PhpRenameClassVariable()<CR>
    " ,rrmでメソッド名の変更
    nnoremap <leader>rrm :call PhpRenameMethod()<CR>
    " ,eu でuse文に抽出
    nnoremap <leader>eu :call PhpExtractUse()<CR>
    " ,ec でconstに抽出
    vnoremap <leader>ec :call PhpExtractConst()<CR>
    " ,ecp で変数をクラスプロパティに変更
    nnoremap <leader>ecp :call PhpExtractClassProperty()<CR>
    " ,em でvモードで選択した範囲をメソッド抽出
    vnoremap <leader>em :call PhpExtractMethod()<CR>
    " ,cp で新しいプロパティを作成
    nnoremap <leader>cp :call PhpCreateProperty()<CR>
    " ,du で使用していないuse文を見つける
    nnoremap <leader>du :call PhpDetectUnusedUseStatements()<CR>
    " ,== で選択範囲を整列
    vnoremap <leader>== :call PhpAlignAssigns()<CR>
    " ,csg でセッターとゲッターを自動生成
    nnoremap <leader>csg :call PhpCreateSettersAndGetters()<CR>
    " ,cog でゲッターのみ生成
    nnoremap <leader>cog :call PhpCreateGetters()<CR>
'''
# Move Class and Directory with updating references, and automatically create properties from constructor arguments
[[plugins]]
repo = 'phpactor/phpactor'
on_ft = ['php']
hook_add = '''
    " phpactorの場所
    let g:phpactor_executable = '~/.config/nvim/dein/repos/github.com/phpactor/phpactor/bin/phpactor'
'''

# Open the PHP Manual for word under cursor
[[plugins]]
repo = 'alvan/vim-php-manual'
on_ft = ['php']
hook_add = '''
    " <Leader> + k でカーソル下の単語のPHPドキュメントを開くことができる
    let g:php_manual_online_search_shortcut = '<leader>k'
'''

# debug php
[[plugins]]
repo = 'joonty/vdebug'
on_ft = ['php', 'blade']

# php code sniffer
[[plugins]]
repo = 'stephpy/vim-php-cs-fixer'
on_ft = ['php']
hook_add = '''
    " If php-cs-fixer is in $PATH, you don't need to define line below
    " let g:php_cs_fixer_path = "~/php-cs-fixer.phar" " define the path to the php-cs-fixer.phar
    let g:php_cs_fixer_rules = "@PSR2"          " options: --rules (default:@PSR2)
    "let g:php_cs_fixer_cache = ".php_cs.cache" " options: --cache-file
    "let g:php_cs_fixer_config_file = '.php_cs' " options: --config
    " End of php-cs-fixer version 2 config params
    let g:php_cs_fixer_php_path = "php"               " Path to PHP
    let g:php_cs_fixer_enable_default_mapping = 1     " Enable the mapping by default (<leader>pcd)
    let g:php_cs_fixer_dry_run = 0                    " Call command with dry-run option
    let g:php_cs_fixer_verbose = 0                    " Return the output of command if 1, else an inline information.
'''

